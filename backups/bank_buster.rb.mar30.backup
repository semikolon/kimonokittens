#coding: utf-8
require 'dotenv/load'
require 'awesome_print'
require 'vessel'
require 'oj'
require 'colorize'
require 'billy'
require 'table_print'

# Billy.configure do |c|
#   c.cache = true
#   c.cache_request_headers = false
#   c.ignore_params = ["http://www.google-analytics.com/__utm.gif",
#                      "https://r.twimg.com/jot",
#                      "http://p.twitter.com/t.gif",
#                      "http://p.twitter.com/f.gif",
#                      "http://www.facebook.com/plugins/like.php",
#                      "https://www.facebook.com/dialog/oauth",
#                      "http://cdn.api.twitter.com/1/urls/count.json"]
#   c.path_blacklist = []
#   c.merge_cached_responses_whitelist = []
#   c.persist_cache = true
#   c.ignore_cache_port = true # defaults to true
#   c.non_successful_cache_disabled = false
#   c.non_successful_error_level = :warn
#   c.non_whitelisted_requests_disabled = false
#   c.cache_path = 'req_cache/'
#   c.certs_path = 'req_certs/'
#   c.proxy_host = 'localhost'
#   c.proxy_port = 12345 # defaults to random
#   c.proxied_request_host = nil
#   c.proxied_request_port = 80
#   c.cache_whitelist = []
#   c.record_requests = true # defaults to false
#   c.cache_request_body_methods = ['post', 'patch', 'put'] # defaults to ['post']
# end

SSN = ENV['ADMIN_SSN']

if SSN.nil? || SSN.empty?
  abort 'Bank customer SSN needed'
end

class BankBuster < Vessel::Cargo
  ferrum(
    #slowmo: 2.0,
    #port: 9222,
    #host: 'localhost',
    process_timeout: 20
    # proxy: { host: "localhost", port: "12345" }
  )
  timeout 10
  #delay 2
  domain 'online.swedbank.se'
  start_urls 'https://online.swedbank.se/app/ib/logga-in'
  # TODO: Start on /start-page and reuse login from last session if possible, need to save and reuse cookies for that though

  def filter_out_non_essentials
    page.browser.network.intercept
    page.browser.on(:request) do |request|
      if ['Image', 'Font','Stylesheet'].include?(request.resource_type)
        if request.match?("/blob:/")
          request.continue
        else
          request.abort
        end
      else
        request.continue
      end
    end
  end

  def accept_cookies
    cookie_button = at_css("acorn-button[data-test-id='acorn-button-accept-all-cookies']")
    if cookie_button
      cookie_button.click
    else
      abort 'button to accept cookies not found'
      puts page.text
    end
  end

  def try_logging_in
    ssn_field = at_css("input[type=text]")
    raise 'SSN field not found' unless ssn_field
    ssn_field.focus.type(SSN, :enter)
    puts 'Filled in SSN, starting login...'.green

    page.network.wait_for_idle
    message = at_css("span[slot=message]")&.text
    puts message if message
    abort if message&.include?('Det gick inte att logga in')

    login_message = at_css(".mobile-bank-id__qr-code--instruction-list").text
    abort unless login_message.include?('Öppna BankID-appen')

    print 'Saving QR codes..'
    while at_css("img.mobile-bank-id__qr-code--image")
      print '.' #puts "...".green
      #puts at_css("img.mobile-bank-id__qr-code--image")&.attribute('src')
      page.screenshot(path: 'qr_code.jpg', selector: 'img.mobile-bank-id__qr-code--image')
      sleep 0.2
      page.network.wait_for_idle
    end
    puts "\n"

    message = at_css("span[slot=message]")&.text
    if message&.include?('för lång tid')
      puts 'Timed out. Restarting login attempt...'
      at_css("acorn-button[label='Försök igen']").click
    end
  end

  def pick_up_files
    page.go_to('https://online.swedbank.se/app/ib/dokument')
    page.network.wait_for_idle
    page.screenshot(path: 'files.jpg')

    table = at_css("acorn-table-content")
    #ap table
    ap at_css("acorn-table-content tr")
    # [2].innerText

    # $$("acorn-item[type='link']")[0].click()
    # click esc to go back to list, if necessary
  end

  def parse
    filter_out_non_essentials
    page.network.wait_for_idle
    page.screenshot(path: 'initial.jpg')

    accept_cookies
    page.network.wait_for_idle
    page.screenshot(path: 'stripped_down.jpg')

    # puts 'Already logged in!' if at_css('h1')&.text == 'Välkommen!'

    begin # if something goes wrong here, click 'abort login'

      until at_css("p[data-cy='verify-yourself']")&.text == 'Legitimera dig i BankID-appen'
        try_logging_in
        page.network.wait_for_idle
      end
      puts 'QR code picked up. Processing login...'
      until at_css('h1')&.text == 'Välkommen!'
        puts 'Checked if logged in yet...'
        sleep 0.2
        page.network.wait_for_idle
      end

    rescue Exception => e # Rescue manual interrupt only?
      puts "\nError - aborting login..."
      puts $! # e.message
      puts $@ # e.backtrace
      page.screenshot(path: 'error.jpg')
      at_css("acorn-button[label='Avbryt']")&.click
      page.network.wait_for_idle
    end

    puts 'Logged in. Reading files...'
    pick_up_files

    yield 'payments file goes here'

    # continually show this qr code
    # $$("img.mobile-bank-id__qr-code--image")[0].src

    # continually watch for an error message, like:
    # $$("acorn-alert-message *[slot='message']")[0].innerText

    # something like...
    # while not logged in?
    #   and qr code present?
    #   (otherwise, abort with error message)
    #     yield a request or call a method
    #     with qr code as argument
    #       request/method shows it to the user somehow
    #       user scans screen, authenticates with Mobile BankId



    # url = absolute_url(next_page[:href])
    # yield request(url: url, handler: :parse)
  end

end


BankBuster.run do |result|
  # interpret the contents of the files here?
end

# puts "Requests received via Puffing Billy Proxy:"
# puts TablePrint::Printer.table_print(Billy.proxy.requests, [
#   :status,
#   :handler,
#   :method,
#   { url: { width: 100 } },
#   :headers,
#   :body
# ])
