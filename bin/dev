#!/usr/bin/env bash
set -euo pipefail

PROCFILE="${PROCFILE:-Procfile.dev}"
PORT_BASE="${PORT_BASE:-3001}"

ensure_tmp() { mkdir -p tmp; }

# Pin Overmind identity for consistent socket/session management
export OVERMIND_NAME="kimonokittens"
export OVERMIND_SOCKET="${OVERMIND_SOCKET:-$PWD/tmp/overmind-kimonokittens.sock}"
SOCKET="$OVERMIND_SOCKET"

have_overmind() { command -v overmind >/dev/null 2>&1; }
running_overmind() { [ -S "$SOCKET" ] && timeout 1 overmind status >/dev/null 2>&1; }
is_tty() { [ -t 1 ] && [ -t 0 ]; }

# Enable file logging for Overmind processes (AI/non-TTY access)
enable_overmind_file_logging() {
  mkdir -p log
  sleep 0.5  # Give Overmind time to create all panes

  # Use tmux to pipe each pane's output to a log file
  # This works non-interactively and requires no Procfile changes
  tmux -S "$SOCKET" list-panes -a -F "#{pane_id} #{window_name}" 2>/dev/null | while read -r pane_id win_name; do
    # Sanitize window name for filename
    safe_name=$(printf "%s" "$win_name" | tr -cs '[:alnum:]_.-' '_')
    log_file="$PWD/log/${safe_name}.log"

    # Enable pipe-pane with -o flag (don't duplicate if already set)
    tmux -S "$SOCKET" pipe-pane -o -t "$pane_id" "exec cat >> '$log_file'" 2>/dev/null || true
  done

  echo "   Logs enabled: log/*.log"
}

cmd="${1:-start}"

case "$cmd" in
  start)
    ensure_tmp

    echo "üöÄ Starting development environment..."

    # Pre-flight check: Ensure we're in clean state
    if [ -S "$SOCKET" ]; then
      echo "‚ö†Ô∏è  Socket file exists, verifying session..."
      # Use timeout to prevent overmind status from hanging indefinitely
      if ! timeout 1 overmind status >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  Stale socket detected. Running cleanup..."
        "$0" stop
        sleep 1
      fi
    fi

    # Aggressive port cleanup to handle straggling processes (run separately - comma syntax doesn't work)
    ports_to_kill=$(lsof -ti :3001 2>/dev/null || true; lsof -ti :5175 2>/dev/null || true)
    if [ -n "$ports_to_kill" ]; then
      echo "‚ö†Ô∏è  Ports occupied, cleaning up: $ports_to_kill"
      echo "$ports_to_kill" | xargs kill -9 2>/dev/null || true
      sleep 1
    fi

    if have_overmind; then
      if running_overmind; then
        if is_tty; then
          echo "‚úÖ Dev already running ‚Äì attaching"
          exec overmind connect
        else
          echo "‚úÖ Dev already running (background mode - not attaching)"
          exit 0
        fi
      else
        echo "‚ú® Starting fresh Overmind session..."
        if is_tty; then
          exec overmind start -f "$PROCFILE" -p "$PORT_BASE"
        else
          # Daemonize for non-TTY (Claude Code) - launches as daemon
          overmind start -f "$PROCFILE" -p "$PORT_BASE" -D
          enable_overmind_file_logging
          echo "‚úÖ Started Overmind as daemon"
          echo "   Status: npm run dev:status"
          echo "   Logs: npm run dev:logs"
          exit 0
        fi
      fi
    else
      echo "‚ö†Ô∏è  Overmind not found; using foreman via Bundler"
      echo "    (Install with: brew install tmux overmind)"
      exec bundle exec foreman start -f "$PROCFILE" -p "$PORT_BASE"
    fi
    ;;
  stop)
    echo "üõë Stopping all development processes..."

    # LEVEL 1: Try graceful shutdown if Overmind is actually running
    if have_overmind; then
      if timeout 1 overmind status >/dev/null 2>&1; then
        echo "   Graceful Overmind shutdown..."
        overmind quit 2>/dev/null || true
        sleep 0.5
      fi
    fi

    # LEVEL 2: Aggressive cleanup (ALWAYS runs, regardless of Level 1 result)
    echo "   Aggressive cleanup..."

    # Kill ALL tmux sessions matching our project pattern
    # Check if tmux server is running first to avoid hanging
    tmux_sessions=""
    if tmux has-session 2>/dev/null; then
      tmux_sessions=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | grep "^kimonokittens" || true)
    fi
    if [ -n "$tmux_sessions" ]; then
      echo "   Killing tmux sessions: $tmux_sessions"
      echo "$tmux_sessions" | xargs -I {} tmux kill-session -t {} 2>/dev/null || true
    fi

    # Kill ALL orphaned tmux processes with our project in the name
    pkill -f 'tmux.*overmind-kimonokittens' 2>/dev/null || true

    # Remove socket file unconditionally
    if [ -e "$SOCKET" ]; then
      echo "   Removing socket: $SOCKET"
      rm -f "$SOCKET"
    fi

    # Remove any tmux temporary directories for this project
    rm -rf /tmp/tmux-$(id -u)/overmind-kimonokittens-* 2>/dev/null || true
    rm -rf /var/folders/*/T/overmind-kimonokittens-* 2>/dev/null || true

    # Kill processes by port (run separately - comma syntax doesn't work)
    ports_to_kill=$(lsof -ti :3001 2>/dev/null || true; lsof -ti :5175 2>/dev/null || true)
    if [ -n "$ports_to_kill" ]; then
      echo "   Killing processes on ports 3001, 5175: $ports_to_kill"
      echo "$ports_to_kill" | xargs kill -9 2>/dev/null || true
    fi

    # Kill processes by name pattern
    pkill -f 'ruby.*puma_server.rb' 2>/dev/null || true
    pkill -f 'vite.*--port 5175' 2>/dev/null || true

    sleep 1
    echo "‚úÖ All processes stopped and cleaned up."
    ;;
  status)
    echo "üîç Development Environment Status"
    echo "================================="

    # Check Overmind status
    overmind_healthy=false
    if have_overmind; then
      if timeout 1 overmind status >/dev/null 2>&1; then
        echo "‚úÖ Overmind: RUNNING"
        timeout 1 overmind status 2>/dev/null || echo "   (Status details unavailable)"
        overmind_healthy=true
      else
        echo "‚ùå Overmind: NOT RUNNING"
        if [ -S "$SOCKET" ]; then
          echo "‚ö†Ô∏è  WARNING: Stale socket detected at $SOCKET"
        fi
      fi
    else
      echo "‚ö†Ô∏è  Overmind: NOT INSTALLED"
    fi

    # Check for zombie tmux sessions
    # Check if tmux server is running first to avoid hanging
    zombie_sessions=""
    if tmux has-session 2>/dev/null; then
      zombie_sessions=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | grep "^kimonokittens" || true)
    fi
    if [ -n "$zombie_sessions" ]; then
      echo "‚ö†Ô∏è  WARNING: Zombie tmux sessions detected:"
      echo "$zombie_sessions" | sed 's/^/      /'
    fi

    # Check for orphaned tmux processes
    orphan_count=$(pgrep -f 'tmux.*overmind-kimonokittens' 2>/dev/null | wc -l | tr -d ' ')
    if [ "$orphan_count" -gt 0 ]; then
      echo "‚ö†Ô∏è  WARNING: $orphan_count orphaned tmux processes detected"
    fi

    echo ""
    echo "üìä Port Analysis:"

    # Check port 3001 (backend)
    backend_proc=$(lsof -ti :3001 2>/dev/null || true)
    if [ -n "$backend_proc" ]; then
      backend_cmd=$(ps -p "$backend_proc" -o comm= 2>/dev/null || echo "unknown")
      echo "‚úÖ Port 3001 (Backend): OCCUPIED by PID $backend_proc ($backend_cmd)"
    else
      echo "‚ùå Port 3001 (Backend): FREE"
    fi

    # Check port 5175 (frontend)
    frontend_proc=$(lsof -ti :5175 2>/dev/null || true)
    if [ -n "$frontend_proc" ]; then
      frontend_cmd=$(ps -p "$frontend_proc" -o comm= 2>/dev/null || echo "unknown")
      echo "‚úÖ Port 5175 (Frontend): OCCUPIED by PID $frontend_proc ($frontend_cmd)"
    else
      echo "‚ùå Port 5175 (Frontend): FREE"
    fi

    echo ""
    echo "üîß Process Summary:"
    ruby_procs=$(pgrep -f 'ruby.*puma_server.rb' 2>/dev/null | wc -l | tr -d ' ')
    vite_procs=$(pgrep -f 'vite.*--port 5175' 2>/dev/null | wc -l | tr -d ' ')
    echo "   Ruby processes: $ruby_procs"
    echo "   Vite processes: $vite_procs"

    # Overall health check
    echo ""
    if [ "$overmind_healthy" = true ] && [ -n "$backend_proc" ] && [ -n "$frontend_proc" ]; then
      echo "üü¢ Status: HEALTHY - All systems operational"
    elif [ -n "$backend_proc" ] || [ -n "$frontend_proc" ]; then
      echo "üü° Status: PARTIAL - Some services running"
      echo ""
      echo "üí° Recommendation: Run 'bin/dev restart' for clean state"
    else
      echo "üî¥ Status: STOPPED - No services running"
      if [ -S "$SOCKET" ] || [ -n "$zombie_sessions" ] || [ "$orphan_count" -gt 0 ]; then
        echo ""
        echo "‚ö†Ô∏è  CLEANUP NEEDED:"
        [ -S "$SOCKET" ] && echo "   ‚Ä¢ Stale socket file"
        [ -n "$zombie_sessions" ] && echo "   ‚Ä¢ Zombie tmux sessions"
        [ "$orphan_count" -gt 0 ] && echo "   ‚Ä¢ Orphaned tmux processes"
        echo ""
        echo "üí° Run: bin/dev stop    # Aggressive cleanup"
        echo "üí° Or:  bin/dev nuke    # Nuclear cleanup (last resort)"
      fi
    fi
    ;;
  restart)
    echo "üîÑ Restarting development environment..."

    # NEVER trust Overmind's restart - always do stop ‚Üí start
    # This ensures clean state every time
    "$0" stop
    sleep 2
    exec "$0" start
    ;;
  logs)
    if have_overmind && running_overmind; then
      if is_tty; then
        # Interactive terminal - attach to Overmind
        exec overmind connect
      else
        # Non-TTY (Claude Code) - tail log files
        mkdir -p log
        # Find all process log files
        log_files=$(ls log/web.log log/frontend.log 2>/dev/null || ls log/*.log 2>/dev/null || true)

        if [ -n "$log_files" ]; then
          echo "üìã Tailing process logs (Ctrl+C to stop):"
          echo "$log_files" | tr ' ' '\n' | sed 's/^/   - /'
          echo ""
          exec tail -n 100 -F $log_files
        else
          echo "‚ö†Ô∏è  No log files found in log/"
          echo "   Logs should be created automatically when starting in non-TTY mode"
          echo "   Try: npm run dev:restart"
          exit 1
        fi
      fi
    else
      echo "‚ùå No Overmind session running"
      echo "   Start first with: npm run dev"
      exit 1
    fi
    ;;
  nuke)
    echo "‚ò¢Ô∏è  NUCLEAR CLEANUP - Killing ALL tmux sessions and processes"
    echo ""
    read -p "This will kill ALL tmux sessions and Ruby/Node processes. Continue? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo "Aborted."
      exit 1
    fi

    echo "üß® Proceeding with nuclear cleanup..."

    # Kill ALL tmux sessions
    # Check if tmux server is running first to avoid hanging
    tmux_sessions=""
    if tmux has-session 2>/dev/null; then
      tmux_sessions=$(tmux list-sessions -F "#{session_name}" 2>/dev/null || true)
    fi
    if [ -n "$tmux_sessions" ]; then
      echo "   Killing all tmux sessions"
      tmux kill-server 2>/dev/null || true
    fi

    # Remove ALL tmux sockets for current user
    rm -rf /tmp/tmux-$(id -u)/* 2>/dev/null || true
    rm -rf /var/folders/*/T/tmux-$(id -u)/* 2>/dev/null || true

    # Remove project socket
    rm -f "$SOCKET" 2>/dev/null || true

    # Kill ALL Ruby processes
    pkill -9 ruby 2>/dev/null || true

    # Kill ALL Node processes
    pkill -9 node 2>/dev/null || true

    # Kill ALL processes on development ports
    lsof -ti :3001,:5175,:8080,:3000,:5000 2>/dev/null | xargs kill -9 2>/dev/null || true

    sleep 2
    echo "‚ò¢Ô∏è  Nuclear cleanup complete. All clear."
    echo ""
    echo "You can now run: bin/dev start"
    ;;
  *)
    echo "Usage: bin/dev [start|stop|restart|status|logs|nuke]"
    echo ""
    echo "  start   - Start all dev processes (backend + frontend)"
    echo "  stop    - Stop all dev processes (aggressive cleanup)"
    echo "  restart - Restart all dev processes (stop + start)"
    echo "  status  - Show process status and health check"
    echo "  logs    - View/attach to process logs"
    echo "  nuke    - Nuclear cleanup (kills ALL tmux and Ruby/Node)"
    echo ""
    echo "Processes: Ruby backend (port 3001), Vite frontend (port 5175)"
    echo ""
    echo "üîß Troubleshooting:"
    echo "   If 'start' fails with 'already running', run: bin/dev stop"
    echo "   If 'stop' doesn't fix it, run: bin/dev nuke"
    exit 1
    ;;
esac